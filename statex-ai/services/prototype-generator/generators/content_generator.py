"""
Content generation using NLP service.
"""

import httpx
import logging
from typing import Dict, Any, List
import json

logger = logging.getLogger(__name__)

class ContentGenerator:
    """Generates content using NLP service."""
    
    def __init__(self, free_ai_service_url: str = "http://localhost:8016"):
        """Initialize content generator."""
        self.free_ai_service_url = free_ai_service_url
        
    async def generate_content(self, requirements: str, analysis: Dict[str, Any], prototype_type: str) -> Dict[str, Any]:
        """Generate content based on requirements and analysis."""
        try:
            # Create prompt for content generation
            prompt = self._create_content_prompt(requirements, analysis, prototype_type)
            
            logger.info("🚀 Calling Free AI Service for content generation")
            
            # Call Free AI Service using the correct /analyze endpoint
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.free_ai_service_url}/analyze",
                    json={
                        "text_content": prompt,
                        "analysis_type": "content_generation",
                        "provider": "mock"  # Use mock for now since Ollama/HuggingFace are unavailable
                    },
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    
                    if result.get("success", False):
                        # Extract content from the analysis response
                        analysis_data = result.get("analysis", {})
                        content = analysis_data.get("generated_content", "")
                        
                        if not content:
                            # If no generated content, try to extract from other fields
                            content = analysis_data.get("website_content", "")
                        
                        if not content:
                            logger.warning("⚠️ No content generated by AI service, using fallback")
                            return self._generate_fallback_content(requirements, prototype_type)
                        
                        # Try to parse JSON content
                        try:
                            if isinstance(content, str):
                                content = json.loads(content)
                            logger.info(f"✅ Successfully generated content using {result.get('provider_used', 'unknown')}")
                            return content
                        except json.JSONDecodeError:
                            logger.warning("⚠️ Generated content is not valid JSON, using fallback")
                            return self._generate_fallback_content(requirements, prototype_type)
                    else:
                        logger.error(f"❌ AI service returned error: {result.get('error', 'Unknown error')}")
                        return self._generate_fallback_content(requirements, prototype_type)
                else:
                    logger.error(f"❌ AI service HTTP error: {response.status_code} - {response.text}")
                    return self._generate_fallback_content(requirements, prototype_type)
                    
        except httpx.TimeoutException:
            logger.error("❌ AI service timeout - using fallback content")
            return self._generate_fallback_content(requirements, prototype_type)
        except Exception as e:
            logger.error(f"❌ Error generating content: {e}", exc_info=True)
            return self._generate_fallback_content(requirements, prototype_type)
    
    def _create_content_prompt(self, requirements: str, analysis: Dict[str, Any], prototype_type: str) -> str:
        """Create prompt for content generation."""
        
        prompt = f"""
Generate comprehensive website content for a {prototype_type} based on these requirements:

REQUIREMENTS: {requirements}

ANALYSIS: {json.dumps(analysis, indent=2)}

PROTOTYPE TYPE: {prototype_type}

Please generate the following content:
1. Hero section headline and subheading
2. About section content
3. Services/Features descriptions
4. Call-to-action text
5. Contact information
6. Footer content
7. Meta descriptions for SEO
8. Page titles

Make the content:
- Professional and engaging
- SEO-optimized
- Clear and concise
- Relevant to the business type
- Action-oriented

Return the content as a JSON object with the following structure:
{{
    "hero": {{
        "headline": "Main headline",
        "subheading": "Supporting text",
        "cta_text": "Call to action button text"
    }},
    "about": {{
        "title": "About section title",
        "description": "About section content"
    }},
    "services": [
        {{
            "title": "Service title",
            "description": "Service description"
        }}
    ],
    "contact": {{
        "title": "Contact section title",
        "description": "Contact section content",
        "form_title": "Form title"
    }},
    "seo": {{
        "title": "Page title",
        "description": "Meta description",
        "keywords": "SEO keywords"
    }}
}}
"""
        
        return prompt
    
    def _generate_fallback_content(self, requirements: str, prototype_type: str) -> Dict[str, Any]:
        """Generate fallback content when NLP service fails."""
        
        if prototype_type == "ecommerce":
            return self._get_ecommerce_content(requirements)
        elif prototype_type == "website":
            return self._get_website_content(requirements)
        else:  # landing_page
            return self._get_landing_content(requirements)
    
    def _get_ecommerce_content(self, requirements: str) -> Dict[str, Any]:
        """E-commerce content template."""
        return {
            "hero": {
                "headline": "Discover Amazing Products",
                "subheading": "Shop the latest trends and find exactly what you're looking for",
                "cta_text": "Shop Now"
            },
            "about": {
                "title": "About Our Store",
                "description": "We're passionate about bringing you the best products at great prices. Our carefully curated selection ensures quality and value for every purchase."
            },
            "services": [
                {
                    "title": "Fast Shipping",
                    "description": "Get your orders delivered quickly with our reliable shipping partners"
                },
                {
                    "title": "Quality Guarantee",
                    "description": "We stand behind every product with our satisfaction guarantee"
                },
                {
                    "title": "24/7 Support",
                    "description": "Our customer service team is here to help whenever you need us"
                }
            ],
            "contact": {
                "title": "Get in Touch",
                "description": "Have questions? We'd love to hear from you. Send us a message and we'll respond as soon as possible.",
                "form_title": "Contact Us"
            },
            "seo": {
                "title": "Online Store - Shop Quality Products",
                "description": "Discover our wide selection of quality products at competitive prices. Fast shipping and excellent customer service.",
                "keywords": "online store, shopping, products, quality, fast shipping"
            }
        }
    
    def _get_website_content(self, requirements: str) -> Dict[str, Any]:
        """Business website content template."""
        return {
            "hero": {
                "headline": "Professional Business Solutions",
                "subheading": "We help businesses grow with innovative solutions and expert guidance",
                "cta_text": "Get Started"
            },
            "about": {
                "title": "About Our Company",
                "description": "We are a dedicated team of professionals committed to delivering exceptional results. With years of experience and a passion for excellence, we help our clients achieve their goals."
            },
            "services": [
                {
                    "title": "Consulting",
                    "description": "Expert advice to help you make informed business decisions"
                },
                {
                    "title": "Strategy",
                    "description": "Comprehensive planning to drive your business forward"
                },
                {
                    "title": "Implementation",
                    "description": "Turn your ideas into reality with our proven methodologies"
                }
            ],
            "contact": {
                "title": "Let's Work Together",
                "description": "Ready to take your business to the next level? Contact us today to discuss how we can help you achieve your goals.",
                "form_title": "Send us a Message"
            },
            "seo": {
                "title": "Business Solutions - Professional Services",
                "description": "Professional business consulting and implementation services. Expert guidance to help your business grow and succeed.",
                "keywords": "business consulting, professional services, strategy, implementation"
            }
        }
    
    def _get_landing_content(self, requirements: str) -> Dict[str, Any]:
        """Landing page content template."""
        return {
            "hero": {
                "headline": "Transform Your Business Today",
                "subheading": "Discover the solution that will revolutionize your workflow and boost your productivity",
                "cta_text": "Start Free Trial"
            },
            "about": {
                "title": "Why Choose Us",
                "description": "Our innovative platform combines cutting-edge technology with user-friendly design to deliver results that exceed expectations."
            },
            "services": [
                {
                    "title": "Easy to Use",
                    "description": "Intuitive interface that anyone can master in minutes"
                },
                {
                    "title": "Powerful Features",
                    "description": "All the tools you need to succeed, all in one place"
                },
                {
                    "title": "24/7 Support",
                    "description": "Our team is always here to help you succeed"
                }
            ],
            "contact": {
                "title": "Ready to Get Started?",
                "description": "Join thousands of satisfied customers who have transformed their business with our solution.",
                "form_title": "Get Started Today"
            },
            "seo": {
                "title": "Business Solution - Transform Your Workflow",
                "description": "Revolutionary business solution that transforms your workflow. Easy to use, powerful features, 24/7 support. Start your free trial today.",
                "keywords": "business solution, workflow, productivity, free trial, transformation"
            }
        }
    
    async def generate_blog_content(self, topic: str, word_count: int = 500) -> str:
        """Generate blog content for a specific topic."""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.nlp_service_url}/api/generate-blog",
                    json={
                        "topic": topic,
                        "word_count": word_count,
                        "style": "professional"
                    },
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    return result.get("content", "")
                else:
                    return self._generate_fallback_blog(topic)
                    
        except Exception as e:
            logger.error(f"Error generating blog content: {e}")
            return self._generate_fallback_blog(topic)
    
    def _generate_fallback_blog(self, topic: str) -> str:
        """Generate fallback blog content."""
        return f"""
# {topic.title()}

This is a comprehensive guide about {topic}. In today's fast-paced world, understanding {topic} is more important than ever.

## Key Points

- **Point 1**: Understanding the fundamentals of {topic}
- **Point 2**: Best practices and implementation strategies
- **Point 3**: Common challenges and how to overcome them

## Getting Started

To begin with {topic}, it's essential to have a clear understanding of your goals and objectives. This will help you make informed decisions and achieve better results.

## Conclusion

{topic.title()} is a crucial aspect of modern business and personal development. By following the guidelines outlined in this article, you can achieve success and growth in your endeavors.

For more information about {topic}, feel free to contact us or explore our other resources.
"""
    
    async def generate_seo_meta(self, content: Dict[str, Any], prototype_type: str) -> Dict[str, str]:
        """Generate SEO meta tags for the prototype."""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.nlp_service_url}/api/generate-seo",
                    json={
                        "content": content,
                        "prototype_type": prototype_type,
                        "meta_type": "complete"
                    },
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    return result.get("meta", {})
                else:
                    return self._generate_fallback_seo(content, prototype_type)
                    
        except Exception as e:
            logger.error(f"Error generating SEO meta: {e}")
            return self._generate_fallback_seo(content, prototype_type)
    
    def _generate_fallback_seo(self, content: Dict[str, Any], prototype_type: str) -> Dict[str, str]:
        """Generate fallback SEO meta tags."""
        title = content.get("seo", {}).get("title", f"{prototype_type.title()} - Professional Solution")
        description = content.get("seo", {}).get("description", f"Professional {prototype_type} solution with modern design and functionality.")
        
        return {
            "title": title,
            "description": description,
            "keywords": content.get("seo", {}).get("keywords", f"{prototype_type}, professional, modern, responsive"),
            "og_title": title,
            "og_description": description,
            "og_type": "website",
            "twitter_card": "summary_large_image",
            "twitter_title": title,
            "twitter_description": description
        }
