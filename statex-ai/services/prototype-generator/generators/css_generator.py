"""
CSS styling generator using AI models.
"""

import httpx
import logging
from typing import Dict, Any
import json

logger = logging.getLogger(__name__)

class CSSGenerator:
    """Generates CSS styles using AI models."""
    
    def __init__(self, free_ai_service_url: str = "http://localhost:8016"):
        """Initialize CSS generator."""
        self.free_ai_service_url = free_ai_service_url
        
    async def generate_css(self, html_content: str, requirements: str, analysis: Dict[str, Any]) -> str:
        """Generate CSS styles based on HTML content and requirements."""
        try:
            # Create prompt for CSS generation
            prompt = self._create_css_prompt(html_content, requirements, analysis)
            
            logger.info("🚀 Calling Free AI Service for CSS generation")
            
            # Call Free AI Service using the correct /analyze endpoint
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.free_ai_service_url}/analyze",
                    json={
                        "text_content": prompt,
                        "analysis_type": "content_generation",
                        "provider": "mock"  # Use mock for now since Ollama/HuggingFace are unavailable
                    },
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    result = response.json()
                    
                    if result.get("success", False):
                        # Extract CSS from the analysis response
                        analysis_data = result.get("analysis", {})
                        css_content = analysis_data.get("generated_content", "")
                        
                        if not css_content:
                            # If no generated content, try to extract from other fields
                            css_content = analysis_data.get("css_styles", "")
                        
                        if not css_content:
                            logger.warning("⚠️ No CSS content generated by AI service, using fallback")
                            return self._generate_fallback_css(html_content, requirements)
                        
                        # Clean and validate CSS
                        css_content = self._clean_css(css_content)
                        
                        logger.info(f"✅ Successfully generated CSS using {result.get('provider_used', 'unknown')}")
                        return css_content
                    else:
                        logger.error(f"❌ AI service returned error: {result.get('error', 'Unknown error')}")
                        return self._generate_fallback_css(html_content, requirements)
                else:
                    logger.error(f"❌ AI service HTTP error: {response.status_code} - {response.text}")
                    return self._generate_fallback_css(html_content, requirements)
                    
        except httpx.TimeoutException:
            logger.error("❌ AI service timeout - using fallback CSS")
            return self._generate_fallback_css(html_content, requirements)
        except Exception as e:
            logger.error(f"❌ Error generating CSS: {e}", exc_info=True)
            return self._generate_fallback_css(html_content, requirements)
    
    def _create_css_prompt(self, html_content: str, requirements: str, analysis: Dict[str, Any]) -> str:
        """Create prompt for CSS generation."""
        
        prompt = f"""
Generate modern, responsive CSS styles for this HTML content:

HTML CONTENT:
{html_content[:2000]}...

REQUIREMENTS: {requirements}

ANALYSIS: {json.dumps(analysis, indent=2)}

Please generate complete CSS with:
1. Modern, clean design
2. Mobile-first responsive design
3. Professional color scheme
4. Smooth animations and transitions
5. Typography hierarchy
6. Proper spacing and layout
7. Hover effects and interactions
8. CSS Grid and Flexbox for layout

Use CSS custom properties (variables) for colors and spacing.
Make it look professional and modern.

Return ONLY the CSS code, no explanations or markdown formatting.
"""
        
        return prompt
    
    def _clean_css(self, css_content: str) -> str:
        """Clean and validate generated CSS."""
        # Remove markdown code blocks if present
        if css_content.startswith("```css"):
            css_content = css_content[6:]
        if css_content.startswith("```"):
            css_content = css_content[3:]
        if css_content.endswith("```"):
            css_content = css_content[:-3]
        
        # Add CSS reset and base styles
        css_reset = """/* CSS Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --primary-color: #3b82f6;
    --secondary-color: #64748b;
    --accent-color: #f59e0b;
    --text-color: #1f2937;
    --bg-color: #ffffff;
    --border-color: #e5e7eb;
    --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
    --border-radius: 0.5rem;
    --font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

body {
    font-family: var(--font-family);
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--bg-color);
}

/* Responsive Design */
@media (max-width: 768px) {
    .container {
        padding: 1rem;
    }
}

"""
        
        return css_reset + css_content.strip()
    
    def _generate_fallback_css(self, html_content: str, requirements: str) -> str:
        """Generate fallback CSS when AI service fails."""
        
        return """/* Modern CSS Framework */
:root {
    --primary-color: #3b82f6;
    --secondary-color: #64748b;
    --accent-color: #f59e0b;
    --text-color: #1f2937;
    --bg-color: #ffffff;
    --border-color: #e5e7eb;
    --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
    --border-radius: 0.5rem;
    --font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: var(--font-family);
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--bg-color);
}

/* Header Styles */
header {
    background: var(--bg-color);
    box-shadow: var(--shadow);
    position: sticky;
    top: 0;
    z-index: 100;
}

nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
}

.logo {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--primary-color);
}

.nav-links {
    display: flex;
    list-style: none;
    gap: 2rem;
}

.nav-links a {
    text-decoration: none;
    color: var(--text-color);
    transition: color 0.3s ease;
}

.nav-links a:hover {
    color: var(--primary-color);
}

/* Hero Section */
.hero {
    text-align: center;
    padding: 4rem 2rem;
    background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
    color: white;
}

.hero h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
    font-weight: 700;
}

.hero p {
    font-size: 1.25rem;
    margin-bottom: 2rem;
    opacity: 0.9;
}

/* Button Styles */
.cta-button {
    background: var(--primary-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: var(--border-radius);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-block;
}

.cta-button:hover {
    background: #2563eb;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
}

.cta-button.primary {
    background: var(--accent-color);
}

.cta-button.primary:hover {
    background: #d97706;
}

.cta-button.secondary {
    background: transparent;
    border: 2px solid white;
    margin-left: 1rem;
}

.cta-button.secondary:hover {
    background: white;
    color: var(--primary-color);
}

/* Grid Layouts */
.product-grid, .service-grid, .feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin: 2rem 0;
}

/* Card Styles */
.product-card, .service-card, .feature-card {
    background: var(--bg-color);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    box-shadow: var(--shadow);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.product-card:hover, .service-card:hover, .feature-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.product-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
}

/* Form Styles */
.contact-form {
    max-width: 600px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.contact-form input,
.contact-form textarea {
    padding: 0.75rem;
    border: 2px solid var(--border-color);
    border-radius: var(--border-radius);
    font-size: 1rem;
    transition: border-color 0.3s ease;
}

.contact-form input:focus,
.contact-form textarea:focus {
    outline: none;
    border-color: var(--primary-color);
}

/* Footer */
footer {
    background: var(--text-color);
    color: white;
    text-align: center;
    padding: 2rem;
    margin-top: 4rem;
}

/* Responsive Design */
@media (max-width: 768px) {
    .nav-links {
        display: none;
    }
    
    .hero h1 {
        font-size: 2rem;
    }
    
    .hero p {
        font-size: 1rem;
    }
    
    .cta-button.secondary {
        margin-left: 0;
        margin-top: 1rem;
    }
    
    .product-grid, .service-grid, .feature-grid {
        grid-template-columns: 1fr;
    }
}

/* Animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.hero, .product-card, .service-card, .feature-card {
    animation: fadeInUp 0.6s ease-out;
}

/* Utility Classes */
.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
}

.text-center {
    text-align: center;
}

.mb-4 {
    margin-bottom: 1rem;
}

.mt-4 {
    margin-top: 1rem;
}
"""
