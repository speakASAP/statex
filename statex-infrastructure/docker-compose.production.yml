services:
  # PostgreSQL Database (Pre-built image)
  postgres:
    image: postgres:15-alpine
    container_name: ${VIRTUAL_HOST}_postgres_prod
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      POSTGRES_DB: ${DB_NAME:-${DEFAULT_DB_NAME}}
      POSTGRES_USER: ${DB_USER:-${DEFAULT_DB_USER}}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-${DEFAULT_DB_PASSWORD}}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - statex_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-${DEFAULT_DB_USER}} -d ${DB_NAME:-${DEFAULT_DB_NAME}}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Pre-built image)
  redis:
    image: redis:7-alpine
    container_name: ${VIRTUAL_HOST}_redis_prod
    restart: unless-stopped
    env_file:
      - ../.env
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-${DEFAULT_REDIS_PASSWORD}}"]
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-${DEFAULT_REDIS_PASSWORD}}
    volumes:
      - redis_data:/data
    networks:
      - statex_network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -h 127.0.0.1 -p 6379 -a \"${REDIS_PASSWORD:-${DEFAULT_REDIS_PASSWORD}}\" ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Backend API (Pre-built Node.js image)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        USER_UID: ${USER_UID:-${DEFAULT_USER_UID}}
    container_name: api.${VIRTUAL_HOST}
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-${DEFAULT_BACKEND_PORT}}:4000"
    volumes:
      # Mount uploads directory to host filesystem for external storage
      - ${UPLOAD_DIR:-./uploads}:/app/uploads
    env_file:
      - ../.env
    environment:
      NODE_ENV: ${NODE_ENV}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      DEBUG: ${DEBUG}
      BASE_URL: ${BASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_COOKIE_EXPIRES_IN: ${JWT_COOKIE_EXPIRES_IN}
      REFRESH_TOKEN_EXPIRES_IN: ${REFRESH_TOKEN_EXPIRES_IN}
      COOKIE_SECRET: ${COOKIE_SECRET}
      NOTIFICATION_SERVICE_URL: ${NOTIFICATION_SERVICE_URL:-${DEFAULT_NOTIFICATION_SERVICE_URL}}
      NOTIFICATION_SERVICE_API_KEY: ${NOTIFICATION_SERVICE_API_KEY:-${DEFAULT_NOTIFICATION_SERVICE_API_KEY}}
      NOTIFICATION_SERVICE_TIMEOUT: ${NOTIFICATION_SERVICE_TIMEOUT:-${DEFAULT_NOTIFICATION_SERVICE_TIMEOUT}}
      NOTIFICATION_SERVICE_RETRIES: ${NOTIFICATION_SERVICE_RETRIES:-${DEFAULT_NOTIFICATION_SERVICE_RETRIES}}
      NOTIFICATION_SERVICE_ENABLED: ${NOTIFICATION_SERVICE_ENABLED:-${DEFAULT_NOTIFICATION_SERVICE_ENABLED}}
      NOTIFICATION_SERVICE_HEALTH_ENDPOINT: ${NOTIFICATION_SERVICE_HEALTH_ENDPOINT:-${DEFAULT_NOTIFICATION_SERVICE_HEALTH_ENDPOINT}}
      NOTIFICATION_SERVICE_NOTIFY_ENDPOINT: ${NOTIFICATION_SERVICE_NOTIFY_ENDPOINT:-${DEFAULT_NOTIFICATION_SERVICE_NOTIFY_ENDPOINT}}
      NOTIFICATION_SERVICE_VERSION_ENDPOINT: ${NOTIFICATION_SERVICE_VERSION_ENDPOINT:-${DEFAULT_NOTIFICATION_SERVICE_VERSION_ENDPOINT}}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX}
      CORS_ORIGIN: ${CORS_ORIGIN}
      CORS_METHODS: ${CORS_METHODS}
      CORS_CREDENTIALS: ${CORS_CREDENTIALS}
      CORS_MAX_AGE: ${CORS_MAX_AGE}
      LOG_LEVEL: ${LOG_LEVEL}
      LOG_FORMAT: ${LOG_FORMAT}
      LOG_FILE: ${LOG_FILE}
      UPLOAD_DIR: /app/uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE}
      MAX_FILES: ${MAX_FILES}
      SESSION_SECRET: ${SESSION_SECRET}
      SESSION_COOKIE_MAX_AGE: ${SESSION_COOKIE_MAX_AGE}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - statex_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application (Pre-built Node.js image)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        BUILD_DATE: ${BUILD_DATE:-${DEFAULT_BUILD_DATE}}
        PACKAGE_VERSION: ${PACKAGE_VERSION:-${DEFAULT_PACKAGE_VERSION}}
        USER_UID: ${USER_UID:-${DEFAULT_USER_UID}}
    container_name: ${VIRTUAL_HOST}
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-${DEFAULT_FRONTEND_PORT}}:3000"
    env_file:
      - ../.env
    environment:
      NODE_ENV: ${NODE_ENV}
      NEXT_PUBLIC_BASE_URL: ${BASE_URL}
      NEXT_PUBLIC_API_URL: ${API_URL}
      DEBUG: ${DEBUG}
    command: ["npm", "start"]
    depends_on:
      - backend
    networks:
      - statex_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${FRONTEND_PORT:-${DEFAULT_FRONTEND_PORT}}"]
      interval: 30s
      timeout: 10s
      retries: 3



  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ${VIRTUAL_HOST}_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-${DEFAULT_NGINX_HTTP_PORT}}:80"
      - "${NGINX_HTTPS_PORT:-${DEFAULT_NGINX_HTTPS_PORT}}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/statex-reverse-proxy.conf.template:/etc/nginx/templates/statex.conf.template
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./webroot:/var/www/html
    environment:
      - virtual_host=${VIRTUAL_HOST}
      - DEFAULT_HOST=${DEFAULT_HOST}
      - ALLOW_SELF_SIGNED=${ALLOW_SELF_SIGNED:-${DEFAULT_ALLOW_SELF_SIGNED}}
    env_file:
      - ../.env
    depends_on:
      - backend
      - frontend
    networks:
      - statex_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Let's Encrypt Certificate Management
  letsencrypt:
    image: certbot/certbot:latest
    container_name: ${VIRTUAL_HOST}_letsencrypt
    restart: unless-stopped
    volumes:
      - ssl_data:/etc/letsencrypt
      - ./logs/certbot:/var/log/letsencrypt
      - ./ssl:/ssl
      - ./webroot:/var/www/html
    environment:
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
      - VIRTUAL_HOST=${VIRTUAL_HOST}
    entrypoint: []
    command:
      - sh
      - -c
      - |
        mkdir -p /var/www/html/.well-known/acme-challenge &&
        echo 'Obtaining/updating SSL certificates with all domains...' &&
        certbot certonly --webroot -w /var/www/html 
          -d ${VIRTUAL_HOST} 
          -d www.${VIRTUAL_HOST} 
          -d api.${VIRTUAL_HOST} 
          --email ${LETSENCRYPT_EMAIL} 
          --agree-tos --non-interactive --expand --force-renewal &&
        cp /etc/letsencrypt/live/${VIRTUAL_HOST}/*.pem /ssl/ 2>/dev/null || echo 'Certificate operation completed' &&
        while true; do 
          sleep 12h && 
          certbot renew --webroot -w /var/www/html --non-interactive && 
          cp /etc/letsencrypt/live/${VIRTUAL_HOST}/*.pem /ssl/ 2>/dev/null || echo 'Renewal check completed'; 
        done
    depends_on:
      - nginx
    networks:
      - statex_network


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ssl_data:
    external: true
    name: ${VIRTUAL_HOST}_ssl_data

networks:
  statex_network:
    driver: bridge
