# Default development configuration
# For production, use: docker compose -f docker-compose.prod.yml up -d
# For development, use: docker compose -f docker-compose.dev.yml up -d

services:
  # Nginx Reverse Proxy with Self-Signed Certificates (Development)
  nginx:
    image: nginx:alpine
    container_name: statex_nginx_dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/statex-reverse-proxy.conf.template:/etc/nginx/templates/statex.conf.template
      - ./nginx/conf.d/prototype-subdomains.conf:/etc/nginx/conf.d/prototype-subdomains.conf
      - ./ssl-dev:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./webroot:/var/www/html
    environment:
      - virtual_host=${VIRTUAL_HOST:-localhost}
      - DEFAULT_HOST=${DEFAULT_HOST:-localhost}
      - ALLOW_SELF_SIGNED=true
    networks:
      - statex_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 20s
      timeout: 10s
      retries: 2

  # Self-Signed Certificate Generator
  cert-generator:
    image: alpine:latest
    container_name: statex_cert_generator
    volumes:
      - ./ssl-dev:/ssl
      - ./scripts/generate-self-signed.sh:/generate-certs.sh
    command: sh -c "apk add --no-cache openssl && chmod +x /generate-certs.sh && /generate-certs.sh"
    networks:
      - statex_network

  # Centralized Database
  postgres:
    image: postgres:15
    container_name: statex_postgres
    environment:
      POSTGRES_DB: statex
      POSTGRES_USER: statex
      POSTGRES_PASSWORD: statex_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - statex_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U statex"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Centralized Redis Cache
  redis:
    image: redis:7-alpine
    container_name: statex_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - statex_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Centralized Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: statex_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: statex
      RABBITMQ_DEFAULT_PASS: statex_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - statex_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 2
    restart: unless-stopped

  # Centralized Object Storage
  minio:
    image: minio/minio:latest
    container_name: statex_minio
    environment:
      MINIO_ROOT_USER: statex
      MINIO_ROOT_PASSWORD: statex_password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - statex_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 20s
      timeout: 10s
      retries: 2
    restart: unless-stopped

  # Centralized Search Engine
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: statex_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - statex_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 2
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  minio_data:
  elasticsearch_data:

networks:
  statex_network:
    driver: bridge
    external: true