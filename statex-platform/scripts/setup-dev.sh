#!/bin/bash
# StateX Local Development Setup Script
# Sets up local development environment for individual services

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

print_header() {
    echo -e "${PURPLE}================================${NC}"
    echo -e "${PURPLE}  StateX Local Dev Setup${NC}"
    echo -e "${PURPLE}================================${NC}"
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in a service directory
check_service_directory() {
    if [ ! -f "requirements.txt" ] && [ ! -f "package.json" ]; then
        print_error "No requirements.txt or package.json found. Are you in a service directory?"
        print_status "This script should be run from within a service directory."
        exit 1
    fi
}

# Setup Python environment
setup_python() {
    print_status "Setting up Python environment..."
    
    # Check if Python 3.11 is available
    if ! command -v python3.11 &> /dev/null; then
        print_error "Python 3.11 not found. Please install Python 3.11 first."
        print_status "You can use pyenv:"
        print_status "  pyenv install 3.11.0"
        print_status "  pyenv local 3.11.0"
        exit 1
    fi
    
    # Check Python version
    PYTHON_VERSION=$(python3.11 --version | cut -d' ' -f2)
    print_status "Using Python $PYTHON_VERSION"
    
    # Create virtual environment
    print_status "Creating virtual environment..."
    python3.11 -m venv venv
    
    # Activate virtual environment
    print_status "Activating virtual environment..."
    source venv/bin/activate
    
    # Upgrade pip
    print_status "Upgrading pip..."
    pip install --upgrade pip
    
    # Install dependencies
    print_status "Installing Python dependencies..."
    pip install -r requirements.txt
    
    print_success "Python environment ready!"
    print_status "To activate: source venv/bin/activate"
    print_status "To run: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
}

# Setup Node.js environment
setup_nodejs() {
    print_status "Setting up Node.js environment..."
    
    # Check if Node.js is available
    if ! command -v node &> /dev/null; then
        print_error "Node.js not found. Please install Node.js 23.11.0 first."
        print_status "You can use nvm:"
        print_status "  nvm install 23.11.0"
        print_status "  nvm use 23.11.0"
        exit 1
    fi
    
    # Check Node version
    NODE_VERSION=$(node --version | cut -d'v' -f2)
    print_status "Using Node.js $NODE_VERSION"
    
    # Check if version is 23.11.0
    if [[ "$NODE_VERSION" != "23.11.0" ]]; then
        print_warning "Node.js version $NODE_VERSION detected. Recommended: 23.11.0"
        print_status "You can use nvm to switch versions:"
        print_status "  nvm install 23.11.0"
        print_status "  nvm use 23.11.0"
    fi
    
    # Install dependencies
    print_status "Installing Node.js dependencies..."
    npm install
    
    print_success "Node.js environment ready!"
    print_status "To run: npm run dev"
}

# Create .env.development file
create_env_file() {
    if [ ! -f ".env.development" ]; then
        print_status "Creating .env.development file..."
        cat > .env.development << EOF
# Development Environment Configuration
# This file is automatically generated by setup-dev.sh

# Database Configuration
DATABASE_URL=postgresql://statex:statex_password@localhost:5432/statex
REDIS_URL=redis://localhost:6379
RABBITMQ_URL=amqp://statex:statex_password@localhost:5672

# External API Keys (Update with your actual keys)
OPENAI_API_KEY=your_openai_key_here
ANTHROPIC_API_KEY=your_anthropic_key_here
TELEGRAM_BOT_TOKEN=your_telegram_bot_token
TELEGRAM_CHAT_ID=your_telegram_chat_id
WHATSAPP_ACCESS_TOKEN=your_whatsapp_token
WHATSAPP_PHONE_NUMBER_ID=your_whatsapp_phone_id
HUGGINGFACE_API_KEY=your_huggingface_key

# S3/MinIO Configuration
S3_ENDPOINT=http://localhost:9000
S3_ACCESS_KEY=statex
S3_SECRET_KEY=statex_password

# Service URLs (Local Development)
AI_ORCHESTRATOR_URL=http://localhost:8010
NOTIFICATION_SERVICE_URL=http://localhost:8005
SUBMISSION_SERVICE_URL=http://localhost:8002
USER_PORTAL_URL=http://localhost:8006
CONTENT_SERVICE_URL=http://localhost:8009
MONITORING_SERVICE_URL=http://localhost:8007
LOGGING_SERVICE_URL=http://localhost:8008

# Frontend Configuration
NEXT_PUBLIC_API_URL=http://localhost:8002/api
NEXT_PUBLIC_BASE_URL=http://localhost:3000
NEXT_PUBLIC_NOTIFICATION_SERVICE_URL=http://localhost:8005
NEXT_PUBLIC_USER_PORTAL_URL=http://localhost:8006
NEXT_PUBLIC_AI_SERVICE_URL=http://localhost:8010

# Development Settings
NODE_ENV=development
DEBUG=true
LOG_LEVEL=debug
ENVIRONMENT=development
EOF
        print_success ".env.development file created"
        print_warning "Please update .env.development with your actual API keys"
    else
        print_status ".env.development file already exists"
    fi
}

# Create development scripts
create_dev_scripts() {
    # Create start-dev.sh script
    if [ ! -f "start-dev.sh" ]; then
        print_status "Creating start-dev.sh script..."
        cat > start-dev.sh << 'EOF'
#!/bin/bash
# Start development server

# Load environment variables
if [ -f ".env.development" ]; then
    export $(cat .env.development | grep -v '^#' | xargs)
fi

# Check if we're in a Python service
if [ -f "requirements.txt" ]; then
    echo "Starting Python service..."
    if [ ! -d "venv" ]; then
        echo "Virtual environment not found. Run setup-dev.sh first."
        exit 1
    fi
    source venv/bin/activate
    uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
fi

# Check if we're in a Node.js service
if [ -f "package.json" ]; then
    echo "Starting Node.js service..."
    npm run dev
fi
EOF
        chmod +x start-dev.sh
        print_success "start-dev.sh script created"
    fi
}

# Main setup function
main() {
    print_header
    
    # Check if we're in a service directory
    check_service_directory
    
    # Create .env.development file
    create_env_file
    
    # Setup Python environment if requirements.txt exists
    if [ -f "requirements.txt" ]; then
        setup_python
    fi
    
    # Setup Node.js environment if package.json exists
    if [ -f "package.json" ]; then
        setup_nodejs
    fi
    
    # Create development scripts
    create_dev_scripts
    
    print_success "Local development setup complete!"
    echo ""
    print_status "Next steps:"
    print_status "1. Update .env.development with your actual API keys"
    print_status "2. Make sure infrastructure services are running:"
    print_status "   cd ../statex-platform && ./dev-manage.sh start"
    print_status "3. Start this service:"
    if [ -f "requirements.txt" ]; then
        print_status "   source venv/bin/activate"
        print_status "   uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
    fi
    if [ -f "package.json" ]; then
        print_status "   npm run dev"
    fi
    print_status "4. Or use the convenience script: ./start-dev.sh"
}

# Run main function
main "$@"

